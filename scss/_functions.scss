// _functions.scss

@function color($color-name, $color-variant: null, $true-val: false) {
  // we need to return the color value
  @if $true-val == true {
    // color variant is optional
    @if ($color-variant != null) {
      // map inception, need two deep
      @return map-get(map-get($colors, $color-name), $color-variant);
    } @else {
      // single-level color, one deep
      @return map-get($colors, $color-name);
    }
    // if we're only returning the CSS4 variable
  } @else {
    // color variant is optional
    @if ($color-variant != null) {
      // map inception, need two names
      @return var(#{$color-prefix}#{$color-name}-#{$color-variant});
    } @else {
      // single-level color, one name
      @return var(#{$color-prefix}#{$color-name});
    }
  }
}

// retrieve size from map with Sass ie. `size(viewport, sm)`
@function size($size-name, $size-variant: null, $true-val: false) {
  // we need to return the size value
  @if $true-val == true {
    // size variant is optional
    @if ($size-variant != null) {
      // map inception, need two deep
      @return map-get(map-get($sizes, $size-name), $size-variant);
    } @else {
      // single-level size, one deep
      @return map-get($sizes, $size-name);
    }
    // if we're only returning the CSS4 variable
  } @else {
    // size variant is optional
    @if ($size-variant != null) {
      // map inception, need two names
      @return #{$size-prefix}#{$size-name}-#{$size-variant};
    } @else {
      // single-level size, one name
      @return #{$size-prefix}#{$size-name};
    }
  }
}

// retrieve size from map with Sass ie. `size(viewport, sm)`
@function padding($size-name, $size-variant: null, $true-val: false) {
  // we need to return the size value
  @if $true-val == true {
    // size variant is optional
    @if ($size-variant != null) {
      // map inception, need two deep
      @return map-get(map-get($paddings, $size-name), $size-variant);
    } @else {
      // single-level size, one deep
      @return map-get($paddings, $size-name);
    }
    // if we're only returning the CSS4 variable
  } @else {
    // size variant is optional
    @if ($size-variant != null) {
      // map inception, need two names
      @return #{$padding-prefix}#{$size-name}-#{$size-variant};
    } @else {
      // single-level size, one name
      @return #{$padding-prefix}#{$size-name};
    }
  }
}

// define local variable
@mixin var($name, $value) {
  #{--$name}: $value;
}
// access any variable
@function v($name) {
  @return var(--#{$name});
}
